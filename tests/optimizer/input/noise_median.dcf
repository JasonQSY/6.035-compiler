// 3x3 median filter.  Removes white noise.
callout pgm_get_next_pixel;
callout start_caliper;
callout pgm_get_rows;
callout pgm_get_cols;
callout pgm_write_next_pixel;
callout end_caliper;
callout pgm_open_for_write;
callout pgm_open_for_read;
callout pgm_close;

int imageIn[130000];
int imageOut[130000];
int cols, rows, size;
void read() {
  int i, j;
  pgm_open_for_read("noise.pgm");
  cols = pgm_get_cols();
  rows = pgm_get_rows();
  size = cols * rows;
  for(i = 0, rows){
    for(j = 0, cols){
      imageIn[i*303+j] = pgm_get_next_pixel();
    }
  }
  pgm_close();
}
void write() {
  int i, j;
  pgm_open_for_write("noise_median.pgm", cols, rows);
  size = cols * rows;
  for(i = 0, rows){
    for(j = 0, cols){
      pgm_write_next_pixel(imageOut[i*303+j]);
    }
  }
  pgm_close();
}
void filter() {
  int i, j;
  int t[20];
  for(i = 1, rows-1){
    for(j = 1, cols-1){
      int p1, p2, p3, p4, p5, p6, p7, p8, p9;
      p1 = imageIn[(i-1)*303 + j-1];
      p2 = imageIn[(i-1)*303 + j];
      p3 = imageIn[(i-1)*303 + j+1];
      p4 = imageIn[i*303 + j-1];
      p5 = imageIn[i*303 + j];
      p6 = imageIn[i*303 + j+1];
      p7 = imageIn[(i+1)*303 + j-1];
      p8 = imageIn[(i+1)*303 + j];
      p9 = imageIn[(i+1)*303 + j+1];
      t[0] = p4 - p1;
      if(t[0] < 0){
        p1 = p1 + t[0];
        p4 = p4 - t[0];
      }
      t[1] = p5 - p2;
      if(t[1] < 0){
        p2 = p2 + t[1];
        p5 = p5 - t[1];
      }
      t[2] = p6 - p3;
      if(t[2] < 0){
        p3 = p3 + t[2];
        p6 = p6 - t[2];
      }
      t[3] = p2 - p1;
      if(t[3] < 0){
        p1 = p1 + t[3];
        p2 = p2 - t[3];
      }
      t[4] = p3 - p1;
      if(t[4] < 0){
        p1 = p1 + t[4];
        p3 = p3 - t[4];
      }
      t[5] = p6 - p5;
      if(t[5] < 0){
        p5 = p5 + t[5];
        p6 = p6 - t[5];
      }
      t[6] = p6 - p4;
      if(t[6] < 0){
        p4 = p4 + t[6];
        p6 = p6 - t[6];
      }
      t[7] = p3 - p2;
      if(t[7] < 0){
        p2 = p2 + t[7];
        p3 = p3 - t[7];
      }
      t[8] = p5 - p4;
      if(t[8] < 0){
        p4 = p4 + t[8];
        p5 = p5 - t[8];
      }
      t[9] = p4 - p2;
      if(t[9] < 0){
        p2 = p2 + t[9];
        p4 = p4 - t[9];
      }
      t[10] = p7 - p2;
      if(t[10] < 0){
        p2 = p2 + t[10];
        p7 = p7 - t[10];
      }
      t[11] = p7 - p5;
      if(t[11] < 0){
        p5 = p5 + t[11];
        p7 = p7 - t[11];
      }
      t[12] = p7 - p3;
      if(t[12] < 0){
        p3 = p3 + t[12];
        p7 = p7 - t[12];
      }
      t[13] = p4 - p3;
      if(t[13] < 0){
        p3 = p3 + t[13];
        p4 = p4 - t[13];
      }
      t[14] = p8 - p5;
      if(t[14] < 0){
        p5 = p5 + t[14];
        p8 = p8 - t[14];
      }
      t[15] = p5 - p3;
      if(t[15] < 0){
        p3 = p3 + t[15];
        p5 = p5 - t[15];
      }
      t[16] = p8 - p4;
      if(t[16] < 0){
        p4 = p4 + t[16];
        p8 = p8 - t[16];
      }
      t[17] = p9 - p5;
      if(t[17] < 0){
        p5 = p5 + t[17];
        p9 = p9 - t[17];
      }
      t[18] = p9 - p4;
      if(t[18] < 0){
        p4 = p4 + t[18];
        p9 = p9 - t[18];
      }
      t[19] = p5 - p4;
      if(t[19] < 0){
        p4 = p4 + t[19];
        p5 = p5 - t[19];
      }
      imageOut[i*303 + j] = p5;
    }
  }
}
void main() {
  read();
  start_caliper();
  filter();
  end_caliper();
  write();
}
